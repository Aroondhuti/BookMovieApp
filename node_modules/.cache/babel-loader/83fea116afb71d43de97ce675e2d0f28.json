{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aroon\\\\OneDrive\\\\Documents\\\\Upgrad-Assignments\\\\BookMovieApp\\\\BookMovieApp\\\\src\\\\screens\\\\home\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport Header from \"../../common/header/Header\";\nimport \"./Home.css\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport ImageList from \"@material-ui/core/ImageList\";\nimport ImageListItem from \"@material-ui/core/ImageListItem\";\nimport ImageListItemBar from \"@material-ui/core/ImageListItemBar\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper\n  },\n  upcomingMoviesGrid: {\n    flexWrap: \"nowrap\",\n    width: \"100%\",\n    transform: \"translateZ(0)\"\n  },\n  releasedMoviesGrid: {\n    transform: \"translateZ(0)\",\n    cursor: \"pointer\"\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 240,\n    maxWidth: 240\n  },\n  title: {\n    color: theme.palette.primary.light\n  }\n});\n\nconst Home = props => {\n  _s();\n\n  const [UpcomingMovies, setUpcomingMovies] = useState([]);\n  const [ReleasedMovies, setReleasedMovies] = useState([]);\n  const [MovieName, setMovieName] = useState(\"\");\n  const [GenreList, setGenreList] = useState([]);\n  const [ArtistList, setArtistList] = useState([]);\n  const [SelectedGenres, setSelectedGenres] = useState([]);\n  const [SelectedArtists, setSelectedArtists] = useState([]);\n  const [StartReleasedDate, setStartReleasedDate] = useState(\"\");\n  const [EndReleasedDate, setEndReleasedDate] = useState(\"\");\n  const {\n    classes\n  } = props;\n  useEffect(() => {\n    //Fetch upcoming movies\n    fetch(props.baseUrl + \"movies?status=PUBLISHED\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Cache-Control\": \"no-cache\"\n      }\n    }).then(response => response.json()).then(response => setUpcomingMovies(response.movies)); //Fetch released movies\n\n    fetch(props.baseUrl + \"movies?status=RELEASED\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Cache-Control\": \"no-cache\"\n      }\n    }).then(response => response.json()).then(response => setReleasedMovies(response.movies)); //Fetch genres\n\n    fetch(props.baseUrl + \"genres\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Cache-Control\": \"no-cache\"\n      }\n    }).then(response => response.json()).then(response => setGenreList(response.genres)); //Fetch artists\n\n    fetch(props.baseUrl + \"artists\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Cache-Control\": \"no-cache\"\n      }\n    }).then(response => response.json()).then(response => setArtistList(response.artists));\n  }, []);\n\n  const applyFilterHandler = () => {\n    let initialQueryString = \"?status=RELEASED\";\n\n    if (MovieName !== \"\") {\n      initialQueryString += \"&title=\" + MovieName;\n    }\n\n    if (SelectedGenres.length > 0) {\n      initialQueryString += \"&genres=\" + SelectedGenres.toString();\n    }\n\n    if (SelectedArtists.length > 0) {\n      initialQueryString += \"&artists=\" + SelectedArtists.toString();\n    }\n\n    if (StartReleasedDate !== \"\") {\n      initialQueryString += \"&start_date=\" + StartReleasedDate;\n    }\n\n    if (EndReleasedDate !== \"\") {\n      initialQueryString += \"&end_date=\" + EndReleasedDate;\n    }\n\n    fetch(props.baseUrl + \"movies\" + encodeURI(initialQueryString), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Cache-Control\": \"no-cache\"\n      }\n    }).then(response => response.json()).then(response => {\n      setReleasedMovies(response.movies);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      baseUrl: props.baseUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upcoming-movies-heading\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Upcoming Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageList, {\n      className: classes.upcomingMoviesGrid,\n      rowHeight: 250,\n      cols: 6,\n      children: UpcomingMovies.map(movie => /*#__PURE__*/_jsxDEV(ImageListItem, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.poster_url,\n          className: \"movie-poster\",\n          alt: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImageListItemBar, {\n          title: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this)]\n      }, \"um\" + movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-half-homepage\",\n        children: /*#__PURE__*/_jsxDEV(ImageList, {\n          className: classes.releasedMoviesGrid,\n          rowHeight: 350,\n          cols: 4,\n          children: ReleasedMovies.map(movie => /*#__PURE__*/_jsxDEV(ImageListItem, {\n            onClick: () => props.history.push(\"/movie/\" + movie.id),\n            className: \"released-movie-grid-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: movie.poster_url,\n              className: \"movie-poster\",\n              alt: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ImageListItemBar, {\n              title: movie.title,\n              subtitle: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Release Date:\", \" \", new Date(movie.release_date).toDateString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this)]\n          }, \"grid\" + movie.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-half-homepage\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.formControl,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.title,\n                color: \"textSecondary\",\n                children: \"FIND MOVIES BY:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.formControl,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"movieName\",\n                children: \"Movie Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"movieName\",\n                onChange: e => setMovieName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.formControl,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"select-multiple-checkbox\",\n                children: \"Genres\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                multiple: true,\n                input: /*#__PURE__*/_jsxDEV(Input, {\n                  id: \"select-multiple-checkbox-genre\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 26\n                }, this),\n                renderValue: selected => selected.join(\",\"),\n                value: SelectedGenres,\n                onChange: e => setSelectedGenres(e.target.value),\n                children: GenreList.map(genre => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: genre.genre,\n                  children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: SelectedGenres.indexOf(genre.genre) > -1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 218,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: genre.genre\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 221,\n                    columnNumber: 23\n                  }, this)]\n                }, genre.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.formControl,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"select-multiple-checkbox\",\n                children: \"Artists\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                multiple: true,\n                input: /*#__PURE__*/_jsxDEV(Input, {\n                  id: \"select-multiple-checkbox\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 26\n                }, this),\n                renderValue: selected => selected.join(\",\"),\n                value: SelectedArtists,\n                onChange: e => setSelectedArtists(e.target.value),\n                children: ArtistList.map(artist => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: artist.first_name + \" \" + artist.last_name,\n                  children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: SelectedArtists.indexOf(artist.first_name + \" \" + artist.last_name) > -1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 243,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: artist.first_name + \" \" + artist.last_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 250,\n                    columnNumber: 23\n                  }, this)]\n                }, artist.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.formControl,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"releaseDateStart\",\n                label: \"Release Date Start\",\n                type: \"date\",\n                defaultValue: \"\",\n                InputLabelProps: {\n                  shrink: true\n                },\n                onChange: e => setStartReleasedDate(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.formControl,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"releaseDateEnd\",\n                label: \"Release Date End\",\n                type: \"date\",\n                defaultValue: \"\",\n                InputLabelProps: {\n                  shrink: true\n                },\n                onChange: e => setEndReleasedDate(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.formControl,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => applyFilterHandler(),\n                variant: \"contained\",\n                color: \"primary\",\n                children: \"APPLY\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"1yZD0CI6xSghURpccAZFGndUvX4=\");\n\n_c = Home;\nexport default withStyles(styles)(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/aroon/OneDrive/Documents/Upgrad-Assignments/BookMovieApp/BookMovieApp/src/screens/home/Home.js"],"names":["React","Fragment","useState","useEffect","Header","withStyles","ImageList","ImageListItem","ImageListItemBar","Card","CardContent","FormControl","Typography","InputLabel","Input","Select","MenuItem","Checkbox","ListItemText","TextField","Button","styles","theme","root","flexGrow","backgroundColor","palette","background","paper","upcomingMoviesGrid","flexWrap","width","transform","releasedMoviesGrid","cursor","formControl","margin","spacing","minWidth","maxWidth","title","color","primary","light","Home","props","UpcomingMovies","setUpcomingMovies","ReleasedMovies","setReleasedMovies","MovieName","setMovieName","GenreList","setGenreList","ArtistList","setArtistList","SelectedGenres","setSelectedGenres","SelectedArtists","setSelectedArtists","StartReleasedDate","setStartReleasedDate","EndReleasedDate","setEndReleasedDate","classes","fetch","baseUrl","method","headers","then","response","json","movies","genres","artists","applyFilterHandler","initialQueryString","length","toString","encodeURI","map","movie","poster_url","id","history","push","Date","release_date","toDateString","e","target","value","selected","join","genre","indexOf","artist","first_name","last_name","shrink"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport Header from \"../../common/header/Header\";\r\nimport \"./Home.css\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport ImageList from \"@material-ui/core/ImageList\";\r\nimport ImageListItem from \"@material-ui/core/ImageListItem\";\r\nimport ImageListItemBar from \"@material-ui/core/ImageListItemBar\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  upcomingMoviesGrid: {\r\n    flexWrap: \"nowrap\",\r\n    width: \"100%\",\r\n    transform: \"translateZ(0)\",\r\n  },\r\n  releasedMoviesGrid: {\r\n    transform: \"translateZ(0)\",\r\n    cursor: \"pointer\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 240,\r\n    maxWidth: 240,\r\n  },\r\n  title: {\r\n    color: theme.palette.primary.light,\r\n  },\r\n});\r\n\r\nconst Home = (props) => {\r\n  const [UpcomingMovies, setUpcomingMovies] = useState([]);\r\n  const [ReleasedMovies, setReleasedMovies] = useState([]);\r\n  const [MovieName, setMovieName] = useState(\"\");\r\n  const [GenreList, setGenreList] = useState([]);\r\n  const [ArtistList, setArtistList] = useState([]);\r\n  const [SelectedGenres, setSelectedGenres] = useState([]);\r\n  const [SelectedArtists, setSelectedArtists] = useState([]);\r\n  const [StartReleasedDate, setStartReleasedDate] = useState(\"\");\r\n  const [EndReleasedDate, setEndReleasedDate] = useState(\"\");\r\n  const { classes } = props;\r\n\r\n  useEffect(() => {\r\n    //Fetch upcoming movies\r\n    fetch(props.baseUrl + \"movies?status=PUBLISHED\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Cache-Control\": \"no-cache\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => setUpcomingMovies(response.movies));\r\n\r\n    //Fetch released movies\r\n    fetch(props.baseUrl + \"movies?status=RELEASED\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Cache-Control\": \"no-cache\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => setReleasedMovies(response.movies));\r\n\r\n    //Fetch genres\r\n    fetch(props.baseUrl + \"genres\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Cache-Control\": \"no-cache\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => setGenreList(response.genres));\r\n\r\n    //Fetch artists\r\n    fetch(props.baseUrl + \"artists\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Cache-Control\": \"no-cache\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => setArtistList(response.artists));\r\n  }, []);\r\n\r\n  const applyFilterHandler = () => {\r\n    let initialQueryString = \"?status=RELEASED\";\r\n\r\n    if (MovieName !== \"\") {\r\n      initialQueryString += \"&title=\" + MovieName;\r\n    }\r\n    if (SelectedGenres.length > 0) {\r\n      initialQueryString += \"&genres=\" + SelectedGenres.toString();\r\n    }\r\n    if (SelectedArtists.length > 0) {\r\n      initialQueryString += \"&artists=\" + SelectedArtists.toString();\r\n    }\r\n    if (StartReleasedDate !== \"\") {\r\n      initialQueryString += \"&start_date=\" + StartReleasedDate;\r\n    }\r\n    if (EndReleasedDate !== \"\") {\r\n      initialQueryString += \"&end_date=\" + EndReleasedDate;\r\n    }\r\n\r\n    fetch(props.baseUrl + \"movies\" + encodeURI(initialQueryString), {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Cache-Control\": \"no-cache\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        setReleasedMovies(response.movies);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Header baseUrl={props.baseUrl} />\r\n      <div className=\"upcoming-movies-heading\">\r\n        <span>Upcoming Movies</span>\r\n      </div>\r\n      <ImageList\r\n        className={classes.upcomingMoviesGrid}\r\n        rowHeight={250}\r\n        cols={6}\r\n      >\r\n        {UpcomingMovies.map((movie) => (\r\n          <ImageListItem key={\"um\" + movie.id}>\r\n            <img\r\n              src={movie.poster_url}\r\n              className=\"movie-poster\"\r\n              alt={movie.title}\r\n            />\r\n            <ImageListItemBar title={movie.title} />\r\n          </ImageListItem>\r\n        ))}\r\n      </ImageList>\r\n      <div className=\"flex-container\">\r\n        <div className=\"left-half-homepage\">\r\n          <ImageList\r\n            className={classes.releasedMoviesGrid}\r\n            rowHeight={350}\r\n            cols={4}\r\n          >\r\n            {ReleasedMovies.map((movie) => (\r\n              <ImageListItem\r\n                onClick={() => props.history.push(\"/movie/\" + movie.id)}\r\n                className=\"released-movie-grid-item\"\r\n                key={\"grid\" + movie.id}\r\n              >\r\n                <img\r\n                  src={movie.poster_url}\r\n                  className=\"movie-poster\"\r\n                  alt={movie.title}\r\n                />\r\n                <ImageListItemBar\r\n                  title={movie.title}\r\n                  subtitle={\r\n                    <span>\r\n                      Release Date:{\" \"}\r\n                      {new Date(movie.release_date).toDateString()}\r\n                    </span>\r\n                  }\r\n                />\r\n              </ImageListItem>\r\n            ))}\r\n          </ImageList>\r\n        </div>\r\n        <div className=\"right-half-homepage\">\r\n          <Card>\r\n            <CardContent>\r\n              <FormControl className={classes.formControl}>\r\n                <Typography className={classes.title} color=\"textSecondary\">\r\n                  FIND MOVIES BY:\r\n                </Typography>\r\n              </FormControl>\r\n\r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel htmlFor=\"movieName\">Movie Name</InputLabel>\r\n                <Input\r\n                  id=\"movieName\"\r\n                  onChange={(e) => setMovieName(e.target.value)}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel htmlFor=\"select-multiple-checkbox\">\r\n                  Genres\r\n                </InputLabel>\r\n                <Select\r\n                  multiple\r\n                  input={<Input id=\"select-multiple-checkbox-genre\" />}\r\n                  renderValue={(selected) => selected.join(\",\")}\r\n                  value={SelectedGenres}\r\n                  onChange={(e) => setSelectedGenres(e.target.value)}\r\n                >\r\n                  {GenreList.map((genre) => (\r\n                    <MenuItem key={genre.id} value={genre.genre}>\r\n                      <Checkbox\r\n                        checked={SelectedGenres.indexOf(genre.genre) > -1}\r\n                      />\r\n                      <ListItemText primary={genre.genre} />\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel htmlFor=\"select-multiple-checkbox\">\r\n                  Artists\r\n                </InputLabel>\r\n                <Select\r\n                  multiple\r\n                  input={<Input id=\"select-multiple-checkbox\" />}\r\n                  renderValue={(selected) => selected.join(\",\")}\r\n                  value={SelectedArtists}\r\n                  onChange={(e) => setSelectedArtists(e.target.value)}\r\n                >\r\n                  {ArtistList.map((artist) => (\r\n                    <MenuItem\r\n                      key={artist.id}\r\n                      value={artist.first_name + \" \" + artist.last_name}\r\n                    >\r\n                      <Checkbox\r\n                        checked={\r\n                          SelectedArtists.indexOf(\r\n                            artist.first_name + \" \" + artist.last_name\r\n                          ) > -1\r\n                        }\r\n                      />\r\n                      <ListItemText\r\n                        primary={artist.first_name + \" \" + artist.last_name}\r\n                      />\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl className={classes.formControl}>\r\n                <TextField\r\n                  id=\"releaseDateStart\"\r\n                  label=\"Release Date Start\"\r\n                  type=\"date\"\r\n                  defaultValue=\"\"\r\n                  InputLabelProps={{ shrink: true }}\r\n                  onChange={(e) => setStartReleasedDate(e.target.value)}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormControl className={classes.formControl}>\r\n                <TextField\r\n                  id=\"releaseDateEnd\"\r\n                  label=\"Release Date End\"\r\n                  type=\"date\"\r\n                  defaultValue=\"\"\r\n                  InputLabelProps={{ shrink: true }}\r\n                  onChange={(e) => setEndReleasedDate(e.target.value)}\r\n                />\r\n              </FormControl>\r\n              <br />\r\n              <br />\r\n              <FormControl className={classes.formControl}>\r\n                <Button\r\n                  onClick={() => applyFilterHandler()}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  APPLY\r\n                </Button>\r\n              </FormControl>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(Home);"]},"metadata":{},"sourceType":"module"}